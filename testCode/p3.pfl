char course[100][50];
int credit[100];
char pre[100][100][100][50];
int T[100];
char grade[100];
bool can_taken[100];
bool recommend[100];

int course_num = 0;
int try_credit = 0;
int get_credit = 0;
int total_credit = 0;
int rest_credit = 0;
int total_grade = 0;

bool equals(char str1[50], char str2[50]) {
    int i = 0;
    int j = 0;
    while (str1[i] != '\0' && str2[i] != '\0') {
        if (str1[i] != str2[i]) {
            return false;
        }
        i = i + 1;
    }
    if (str1[i] != '\0' || str2[i] != '\0') {
        return false;
    } else {
        return true;
    }
    return false;
}

bool judge(char p_course[50]) {
    int i;
    for (i = 0; i < course_num; i = i + 1) {
        if (equals(course[i], p_course)) {
            return can_taken[i];
        }
    }
    return false;
}

int main() {
    int i = 0;
    char discard;
    char pre_coursers[50];
    while (true) {
        read("%c", course[i][0]);
        if (course[i][0] == '\n') {
            break;
        }
        read("%[^|]", course[i][1]);
        read("%c", discard);
        read("%d", credit[i]);
        total_credit = total_credit + credit[i];
        read("%c", discard);
        read("%[^|]", pre_coursers);
        if (pre_coursers[0] == '\0') {
            can_taken[i] = true;
        } else {
            can_taken[i] = false;
        }
        int j = 0;
        int t = 0;
        int m = 0;
        int n = 0;
        for (j = 0; pre_coursers[j] != '\0'; j = j + 1) {
            if (pre_coursers[j] == ',') {
                pre[i][t][m][n] = '\0';
                m = m + 1;
                n = 0;
                n = n + 1;
                continue;
            }
            if (pre_coursers[j] == ';') {
                pre[i][t][m][n] = '\0';
                t = t + 1;
                m = 0;
                n = 0;
                n = n + 1;
                continue;
            }
            pre[i][t][m][n] = pre_coursers[j];
            n = n + 1;
        }
        T[i] = t + 1;
        read("%c", discard);
        read("%[^\n]", grade[i]);
        if (grade[i] != '\0') {
            try_credit = try_credit + credit[i];
            if (grade[i] != 'F') {
                get_credit = get_credit + credit[i];
                total_grade = total_grade + credit[i] * (int)('E' - grade[i]);
            }
        }
        read("%c", discard);
        i = i + 1;
    }
    course_num = i;
    rest_credit = total_credit - get_credit;

    while (true) {
        bool finish = true;
        int i;
        for (i = 0; i < course_num; i = i + 1) {
            if (can_taken[i]) {
                continue;
            }
            bool can_this = false;
            int t;
            for (t = 0; t < T[i]; t = t + 1) {
                bool can_this_group = true;
                int m = 0;
                while (pre[i][t][m][0] != '\0') {
                    can_this_group = can_this_group && judge(pre[i][t][m]);
                    m = m + 1;
                }
                if (can_this_group == true) {
                    can_this = true;
                    break;
                }
            }
            if (can_this) {
                can_taken[i] = true;
                recommend[i] = true;
                finish = false;
            }
        }
        if (finish) {
            break;
        }
    }

    print("GPA: %.1f\n", 1.0 * (float)total_grade / (float)try_credit);
    print("Hours Attempted: %d\n", try_credit);
    print("Hours Completed: %d\n", get_credit);
    print("Credits Remaining: %d\n", rest_credit);
    print("\nPossible Courses to Take Next\n");

    if (rest_credit == 0) {
        print("  None - Congratulations!\n");
    } else {
        int i;
        for (i = 0; i < course_num; i = i + 1) {
            if (recommend[i]) {
                print("  %s\n", course[i]);
            }
        }
    }

    return 0;
}
