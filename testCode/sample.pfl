int x, y = -1; // default value: 0
string s0, s1 = "abc", s2 = 'abc'; // default value: ""
float z, w = 1.2345, u = (int)y; // default value: 0.0
 // strongly typed, must use (TYPE) to convert the type
bool b = false, c = true;
func f = [x, b](int arg1, bool arg2)->void {return;} // func variable must be constant
int intArray[100]; // every element initialized with default value 0

class A {
    int a_x, a_y;
    string a_s;

    // use prefix '__' to mark the private variables and methods
    int __a_z;

    A() : a_x(0), a_y(1), a_s('abc'), __a_z(-2) { // must implement construction function
        a_x = 0;
        a_y = 1;
        a_s = '11111';
    }

    void foo() {
        a_x = 1;
    }

    void __fee() {

    }

    // ne deconstruction function
}

interface BB {
    int getValue();
    void setValue(int x);
}

class B implements BB { // only one interface can be implemented, and no extending
    int b_x;
    A b_a;
    B(int x) : b_a(), b_x(x) {}
    int getValue() {
        return b_x;
    }
    void setValue(int x) {
        return b_x;
    }
}

void printValue(int x) {
    // use llvm to call printf (use the type of variable to infer the format string, e.g. "%d", "%s", and "%f")
    print("print from printValue\n");
    print(x);
    print("\n");
}

void funcfunc(func f) {
    f();
}

int main() {
    // use llvm to call scanf
    int input_i;
    read(input_i);
    string input_s;
    read(input_s);
    float input_f;
    read(input_f);

    int ii = 0;

    func print_input_f = [ii]()->string { // pass the address of ii into func, and ref the address when use ii
        printValue(ii);
        return "QAQ";
    }

    print_input_f(); // print 0

    func sample_f = [input_s, print_input_f]()->string {
        funcfunc(print_input_f);
        return input_s;
    }

    A a();

    a.foo();

    B b(2333);

    b.b_a.foo();

    for (i = 1; i < 10; ++i) {
        if (i == 5) {
            print(i);
        }
    }


    return 0;
}
